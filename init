#!/bin/bash

set -euo pipefail

# create backup directory
backup_dir="/tmp/dotfiles_$(date +%Y%m%d)"
bin=/usr/local/bin
dotfiles=$HOME/dotfiles

export XDG_CONFIG_HOME="$HOME/.config"
kitty_dir=$XDG_CONFIG_HOME/kitty
karabiner_dir=$XDG_CONFIG_HOME/karabiner
nvim_dir=$XDG_CONFIG_HOME/nvim
i3_dir=$XDG_CONFIG_HOME/i3

# create backup
backup() {
  if [ ! -d $backup_dir ]; then
    mkdir "$backup_dir"
    echo "Backup directory $backup_dir created."
  fi

  if [ -f $1 ]; then
    echo $1
    mv $1 $backup_dir
    echo "$1 is backed up in $backup_dir"
  fi
}

# check if given command is available
has_command() {
  command -v $1 >/dev/null 2>&1
}

# create symsymlink
symlink() {
  if ! diff $1 $2 &>/dev/null; then
    backup $2; ln -sf $1 $2 

    echo "$2 is successfully symlinked."
  fi
}

if [[ "$OSTYPE" == "darwin"* ]]; then
  echo "Platform is mac osx. Installing.."
  ./bin/osx-bootstrap

  symlink $dotfiles/configs/yabairc $HOME/.yabairc
  symlink $dotfiles/configs/hammerspoon/init.lua $HOME/.hammerspoon/init.lua
  symlink $dotfiles/configs/hammerspoon/yabai.lua $HOME/.hammerspoon/yabai.lua

  [ ! -d $karabiner_dir ] && mkdir $karabiner_dir
  symlink $dotfiles/configs/karabiner/karabiner.json $karabiner_dir/karabiner.json
fi

if [ -f /etc/arch-release ]; then
  echo "Platform is arch. Installing.."
  ./bin/arch-bootstrap
fi

symlink $dotfiles/configs/gitconfig $HOME/.gitconfig

symlink $dotfiles/zsh/zshrc $HOME/.zshrc
symlink $dotfiles/tmux/tmux.conf $HOME/.tmux.conf

[ ! -d $kitty_dir ] && mkdir $kitty_dir
symlink $dotfiles/configs/kitty/kitty.conf $kitty_dir/kitty.conf

[ ! -d $i3_dir ] && mkdir $i3_dir
symlink $dotfiles/configs/i3/config $i3_dir/config

echo "installing tmux-plugins"
if [ ! -d "$HOME/.tmux/plugins/tpm" ]; then
  git clone https://github.com/tmux-plugins/tpm $HOME/.tmux/plugins/tpm
fi

if has_command nvim; then
  echo "nvim found. configuring to use nvim.."

  if [ ! -d $nvim_dir ]; then 
    mkdir -p $nvim_dir
    git clone https://github.com/NvChad/NvChad $nvim_dir --depth 1 
  else 
    echo "$nvim_dir is not empty. skipping.."
  fi

  symlink $dotfiles/nvim $HOME/.config/nvim/lua/custom
fi

if [[ $SHELL != *"zsh" ]]; then
  has_command zsh && chsh -s $(which zsh)
fi

echo "Hurray!!! Dotfiles successfully setup."

# source $HOME/.zshrc
# if [ "$restart_required" = true ]; then
#    echo "You must restart your session in order for configurations to take affect!!!"
# else 
#   echo "Restarting shell"
#   exec zsh
# fi
